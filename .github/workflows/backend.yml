name: Backend Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: ${{ vars.EC2_BACKEND_HOST }}
        USER: ec2-user
      run: |
        # Save private key to file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Build the Docker image
        docker build -t backend:latest backend/
        
        # Save the image to a tar file
        docker save backend:latest > backend.tar
        
        # Copy the tar file to the EC2 instance
        scp -i private_key.pem -o StrictHostKeyChecking=no backend.tar ${USER}@${HOST}:~/
        
        # Load and run the Docker image on EC2
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} "\
          docker load < backend.tar && \
          docker stop backend || true && \
          docker rm backend || true && \
          docker run -d --name backend \
            --restart unless-stopped \
            -p 8080:3001 \
            -e DB_HOST=${{ vars.DATABASE_HOST }} \
            -e DB_PORT=${{ vars.DATABASE_PORT }} \
            -e DB_NAME=${{ vars.DATABASE_NAME }} \
            -e DB_USER=${{ secrets.DATABASE_USER }} \
            -e DB_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ vars.AWS_REGION }} \
            -e SOURCE_EMAIL=${{ vars.SOURCE_EMAIL }} \
            backend:latest && \
          rm backend.tar"
          
        # Cleanup local files
        rm -f private_key.pem backend.tar
